/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import org.example.common.*;
import org.example.utils.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import org.example.AmazonServerMocker;
import org.example.AmazonServerMocker;

import java.io.IOException;



public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public String databaseSetUp() {
        return "database set up successfully!";
    }

    public static void dbClear(Session session) {
        Transaction clearTransaction = session.beginTransaction();
        session.createNativeMutationQuery("DELETE FROM users").executeUpdate();
        session.createNativeMutationQuery("DELETE FROM shipments").executeUpdate();
        session.createNativeMutationQuery("DELETE FROM requests").executeUpdate();
        session.createNativeMutationQuery("DELETE FROM trucks").executeUpdate();
        session.createNativeMutationQuery("DELETE FROM acks").executeUpdate();
        session.createNativeMutationQuery("DELETE FROM resend_acks").executeUpdate();
        session.createNativeMutationQuery("DELETE FROM u_delivery_location").executeUpdate();
        session.createNativeMutationQuery("DELETE FROM u_go_deliver").executeUpdate();
        session.createNativeMutationQuery("DELETE FROM u_go_pickup").executeUpdate();
        session.createNativeMutationQuery("DELETE FROM u_query").executeUpdate();
        clearTransaction.commit();
    }
    public static void dbInit(Session session) {
        Transaction insertTransaction = session.beginTransaction();
        User user1 = new User();
        user1.setUsername("Chi Le");
        user1.setEmail("charles.chi.le@outlook.com");
        user1.setPassword("passW0rd");
        session.persist(user1);

        Request request1 = new Request();
        request1.setSeqNum((long)9999999);
        session.persist(request1);

        Warehouse warehouse1 = new Warehouse();
        warehouse1.setWarehouseId(88888888);
        warehouse1.setWarehouseX(66);
        warehouse1.setWarehouseY(77);
        session.persist(warehouse1);

        Truck truck1 = new Truck();
        truck1.setTruckId(987654321);
        truck1.setX(55);
        truck1.setY(66);
        truck1.setStatus("status?");
        truck1.setIsArrived(false);
        session.persist(truck1);
        
        Shipment package1 = new Shipment();
        package1.setPackageId((long)10101010);
        package1.setWarehouseId(warehouse1.getWarehouseId());
        package1.setWarehouseX(warehouse1.getWarehouseX());
        package1.setWarehouseY(warehouse1.getWarehouseY());
        package1.setDestinationX(33);
        package1.setDestinationY(44);
        package1.setUpsId("upsId");
        package1.setStatus("packing");
        package1.setTruckId(truck1.getTruckId());
        package1.setRequstId(request1.getRequestId());
        session.persist(package1);

        Ack ack1 = new Ack();
        ack1.setAck(1L);
        session.persist(ack1);

        ResendAck resend_ack1 = new ResendAck();
        resend_ack1.setAck(1L);
        session.persist(resend_ack1);

        // UGoPickupD u_go_pickup1 = new UGoPickupD();
        

        insertTransaction.commit();
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        // for docker log
        System.out.println(new App().getGreeting());

        // DebugTcpServer debugServer = new DebugTcpServer(22222);
        // new Thread(debugServer).start();

        Session session = HibernateUtil.getSessionFactory().openSession();
        // Transaction clearTransaction = session.beginTransaction();
        
        // session.createNativeMutationQuery("DELETE FROM users").executeUpdate();
        // session.createNativeMutationQuery("DELETE FROM shipments").executeUpdate();
        // session.createNativeMutationQuery("DELETE FROM requests").executeUpdate();
        // session.createNativeMutationQuery("DELETE FROM trucks").executeUpdate();
        // session.createNativeMutationQuery("DELETE FROM warehouses").executeUpdate();
        // clearTransaction.commit();
        dbClear(session);

        // Transaction insertTransaction = session.beginTransaction();
        // User user1 = new User();
        // user1.setUsername("Chi Le");
        // user1.setEmail("charles.chi.le@outlook.com");
        // user1.setPassword("passW0rd");
        // session.persist(user1);

        // Request request1 = new Request();
        // request1.setSeqNum((long)9999999);
        // session.persist(request1);

        // Warehouse warehouse1 = new Warehouse();
        // warehouse1.setWarehouseId(88888888);
        // warehouse1.setWarehouseX(66);
        // warehouse1.setWarehouseY(77);
        // session.persist(warehouse1);

        // Truck truck1 = new Truck();
        // truck1.setTruckId(987654321);
        // truck1.setX(55);
        // truck1.setY(66);
        // truck1.setStatus("status?");
        // truck1.setIsArrived(false);
        // session.persist(truck1);
        
        // Shipment package1 = new Shipment();
        // package1.setPackageId((long)10101010);
        // package1.setWarehouseId(warehouse1.getWarehouseId());
        // package1.setWarehouseX(warehouse1.getWarehouseX());
        // package1.setWarehouseY(warehouse1.getWarehouseY());
        // package1.setDestinationX(33);
        // package1.setDestinationY(44);
        // package1.setUpsId("upsId");
        // package1.setStatus("packing");
        // package1.setTruckId(truck1.getTruckId());
        // package1.setRequstId(request1.getRequestId());
        // session.persist(package1);

        // insertTransaction.commit();

        session.close();
        // HibernateUtil.shutdown();

        System.out.println(new App().databaseSetUp());
        
        UpsServer upsServer = new UpsServer(22222, "vcm-45098.vm.duke.edu", HibernateUtil.getSessionFactory(), 10);
        // Amazon Mocker
        // AmazonServerMocker amazonMocker = new AmazonServerMocker("vcm-45098.vm.duke.edu", 12345, upsServer.getLogger(), 10);
        // amazonMocker.run();
        // TODO: only for mocking, modify in the future
        // long id = amazonMocker.getWorldid();
        // upsServer.setWorldid(id);
        // Test UConnect message
        upsServer.run();
       
        while(true) {

        } 
        // connect to UPS
        // amazonMocker.sendAInformWorld();
        
        // Thread.sleep(5000);

    }
}
